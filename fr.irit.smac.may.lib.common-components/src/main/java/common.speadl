
import java.lang.String
import fr.irit.smac.may.lib.interfaces.*
import java.util.concurrent.Executor

namespace fr.irit.smac.may.lib.components {

	component Queue[Truc] {
		provides put: Push[Truc]
		provides get: Pull[Truc]
	}
	
	component SequentialDispatcher[Truc] {
		provides dispatch: Push[Truc]

		requires executor: Executor

		instance queue: Queue[Truc]

		requires handler: Push[Truc]
	}
	
		transverse ReferenceSender[MsgType, Ref] {
		agent {
			provides send: Send[MsgType, Ref]
		}
		infra {
			requires deposit: Send[MsgType, Ref]
		}
	}

	import fr.irit.smac.may.lib.components.refreceive.impl.AgentRef

	transverse ReferenceReceiver[MsgType] {
		agent {
			requires put: Push[MsgType]
			provides me: Pull[AgentRef[MsgType]]
			provides stop: Do
		}
		infra {
			provides deposit: Send[MsgType, AgentRef[MsgType]]
		}
	}
	
	transverse Placed {
		agent {
			provides myPlace: Pull[Place]
		}
		infra {
			provides thisPlace: Pull[Place]
		}
	}
	
	import fr.irit.smac.may.lib.components.either.impl.Either
	
	component Either[L,R] {
		provides left: Push[L]
		provides right: Push[R]
		
		requires out: Push[Either[L,R]]
	}
	
	component UnEither[L,R] {
		requires left: Push[L]
		requires right: Push[R]
		
		provides in: Push[Either[L,R]]
	}



	transverse IdentifierReceiver[Msg,RealRef] {
		agent {
			provides me: Pull[String]
			requires realMe: Pull[RealRef]
			provides disconnect: Do
		}
		infra {
			provides deposit: Send[Msg, String]
			requires realDeposit: Send[Msg, RealRef]
		}
	}

	import fr.irit.smac.may.lib.components.remrefreceive.impl.RemoteAgentRef
	import fr.irit.smac.may.lib.components.remplace.impl.Place

	transverse RemoteReferenceReceiver[Msg, LocalRef] {
		agent {
			provides me: Pull[RemoteAgentRef[Msg]]
			requires localMe: Pull[LocalRef]
			provides disconnect: Do
		}
		infra {
			requires localDeposit: Send[Msg, LocalRef]
			requires myPlace: Pull[Place]
			provides deposit: Send[Msg, RemoteAgentRef[Msg]]
		}
	}

	transverse Scheduled {
		agent {
			requires cycle: Do
			provides stop: Do
		}
		infra {
			requires sched: Executor
		}
	}

	transverse Scheduler {
		agent {
			provides sched: Executor
			provides stop: Do
		}
		infra {
			requires infraSched: Executor
		}
	}

	transverse Broadcaster[T, Ref] {
		agent {
			provides bc: Broadcast[T]
		}
		infra {
			requires deposit: Send[T, Ref]
			provides add: Push[Ref]
			provides remove: Push[Ref]
		}
	}

	component ExecutorService {
		provides exec: Executor
	}
}