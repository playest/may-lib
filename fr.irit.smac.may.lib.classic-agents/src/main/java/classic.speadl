
import java.lang.String
import fr.irit.smac.may.lib.interfaces.*
import fr.irit.smac.may.lib.classic.interfaces.*
import fr.irit.smac.may.lib.components.scheduling.*
import fr.irit.smac.may.lib.components.messaging.*
import fr.irit.smac.may.lib.components.messaging.receiver.*
import fr.irit.smac.may.lib.components.controlflow.*
import fr.irit.smac.may.lib.components.remote.place.*
import fr.irit.smac.may.lib.components.remote.messaging.receiver.*
import fr.irit.smac.may.lib.components.remote.messaging.receiver.RemoteAgentRef
import fr.irit.smac.may.lib.components.remote.place.Place
import fr.irit.smac.may.lib.components.messaging.receiver.AgentRef
		
import java.util.concurrent.Executor

namespace fr.irit.smac.may.lib.classic {

	namespace local {
		
		component ClassicBehaviour[Msg, Ref] {
			provides cycle: Push[Msg]
			requires send: Send[Msg, Ref]
			requires me: Pull[Ref]
			requires die: Do
			requires create: CreateClassic[Msg, Ref]
		}
		
		infrastructure Classic[Msg] {

			provides send: Send[Msg, AgentRef] = receive.deposit
			provides create: CreateClassic[Msg, AgentRef]

			transverse scheduler: Scheduler {
				bind infraSched to executor.exec
			}

			transverse sender: Sender[Msg, AgentRef] {
				bind deposit to receive.deposit
			}

			transverse receive: Receiver[Msg]

			transverse fact: fr.irit.smac.may.lib.components.meta.Forward[CreateClassic[Msg, AgentRef]] {
				bind i toThis create
			}

			instance executor: ExecutorService

			species ClassicAgent for ClassicAgentComponent[Msg, AgentRef] {

				bind send to sender.send
				bind me to receive.me
				bind executor to scheduler.sched
				bind die to scheduler.stop
				bind create to fact.a

				use scheduler

				use fact

				use receive {
					bind put toThis put
				}

				use sender
			}
		}

		component ClassicAgentComponent[Msg, Ref] {
			provides put: Push[Msg] = dispatcher.dispatch
			requires send: Send[Msg, Ref]
			requires me: Pull[Ref]
			requires executor: Executor
			requires die: Do
			requires create: CreateClassic[Msg, Ref]

			instance dispatcher: SequentialDispatcher[Msg] {
				bind executor toThis executor
				bind handler to beh.cycle
			}
			instance beh: ClassicBehaviour[Msg, Ref] {
				bind send toThis send
				bind me toThis me
				bind die toThis die
				bind create toThis create
			}
		}

		// infrastructure de mise au point vs infra finale



	}

	namespace remote {

		component RemoteClassicBehaviour[Msg, Ref] {
			provides cycle: Push[Msg]
			requires send: Send[Msg, Ref]
			requires me: Pull[Ref]
			requires die: Do
			requires create: CreateRemoteClassic[Msg, Ref]
		}

		component RemoteClassicAgentComponent[Msg, Ref] {
			provides put: Push[Msg] = dispatcher.dispatch
			requires send: Send[Msg, Ref]
			requires me: Pull[Ref]
			requires executor: Executor
			provides die: Do
			requires stopExec: Do
			requires stopReceive: Do
			requires create: CreateRemoteClassic[Msg, Ref]

			instance dispatcher: SequentialDispatcher[Msg] {
				bind executor toThis executor
				bind handler to beh.cycle
			}
			instance beh: RemoteClassicBehaviour[Msg, Ref] {
				bind send toThis send
				bind me toThis me
				bind die toThis die
				bind create toThis create
			}
		}

		transverse RemoteFactory[Msg, Ref] {
			agent {
				provides create: CreateRemoteClassic[Msg, Ref]
			}
			infra {
				requires infraCreate: CreateRemoteClassic[Msg, Ref]
				provides factCreate: CreateRemoteClassic[Msg, Ref]
				requires thisPlace: Pull[Place]
			}
		}
		


		infrastructure RemoteClassic[Msg] {

			provides send: Send[Msg, RemoteAgentRef] = remReceive.deposit
			provides thisPlace: Pull[Place] = placed.thisPlace
			provides create: CreateRemoteClassic[Msg, RemoteAgentRef]

			transverse scheduler: Scheduler {
				bind infraSched to executor.exec
			}

			transverse sender: Sender[Msg, RemoteAgentRef] {
				bind deposit to remReceive.deposit
			}

			transverse receive: Receiver[Msg]

			transverse placed: Placed

			transverse remReceive: RemoteReceiver[Msg, AgentRef] {
				bind localDeposit to receive.deposit
				bind myPlace to placed.thisPlace
			}

			transverse fact: RemoteFactory[Msg, RemoteAgentRef] {
				bind infraCreate toThis create
				bind thisPlace to placed.thisPlace
			}

			instance executor: ExecutorService

			species ClassicAgent for RemoteClassicAgentComponent[Msg, RemoteAgentRef] {
				bind send to sender.send
				bind me to remReceive.me
				bind stopExec to scheduler.stop
				bind stopReceive to remReceive.disconnect
				bind executor to scheduler.sched
				bind create to fact.create
				use placed
				use fact
				use scheduler
				use receive {
					bind put toThis put
				}
				use sender
				use remReceive {
					bind localMe to receive.me
				}
			}
		}
	}
}