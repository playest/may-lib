
import fr.irit.smac.may.lib.interfaces.*
import fr.irit.smac.may.lib.components.interactions.interfaces.*
import java.lang.*

namespace fr.irit.smac.may.lib.components.interactions {
	

	import fr.irit.smac.may.lib.components.interactions.directreferences.*
	
	ecosystem DirectReferences[I] {

		// name is only used for pretty
  		// printing the reference with toString()
		species Callee(name: String) {
			requires toCall: I
			provides me: Pull[DirRef]
			provides stop: Do
		}
		
		species Caller {
			provides call: Call[I,DirRef]
		}
		
		provides call: Call[I,DirRef]
		
	}
	
	ecosystem MapReferences[I,K] {
		
		species Callee(key: K) {
			requires toCall: I
			provides me: Pull[K]
			provides stop: Do
		}
		
		species CalleePullKey {
			requires toCall: I
			requires key: Pull[K]
			
			provides me: Pull[K]
			provides stop: Do
		}
		
		species Caller {
			provides call: Call[I,K]
		}
		
		provides call: Call[I,K]
		
	}
	
	import java.util.Collection
	import fr.irit.smac.may.lib.components.collections.Queue
	
	ecosystem AsyncReceiver[M,K] {
		
		// does not take care of buffering messages
		// put cannot be blocking!
		species Receiver {
			requires put: Push[M]
			provides toCall: Push[M] delegateToThis put
		}
		
		// takes care of buffering messages
		species ReceiverBuf {
			
			provides getNext: Pull[M] = q.get
			provides getAll: Pull[Collection[M]] = q.getAll
			
			part q: Queue[M]
			
			provides toCall: Push[M] = q.put
		}
		
		species Sender {
			provides send: ReliableSend[M, K]
		}
		
		requires call: Call[Push[M],K]
		provides deposit: ReliableSend[M, K]
	}
	
	ecosystem ValuePublisher[T,K] {
		
		species PublisherPush {
			provides set: Push[T]
			provides get: Pull[T]
			provides toCall: Pull[T] delegateToThis get
		}
		
		species PublisherPull {
			provides get: Pull[T]
			requires getValue: Pull[T]
			provides toCall: Pull[T] delegateToThis get
		}
		
		species Observer {
			provides observe: ReliableObserve[T, K]
		}
		
		requires call: Call[Pull[T],K]
		provides observe: ReliableObserve[T, K]
	}

}