import fr.irit.smac.may.lib.components.scheduling.interfaces.AdvancedExecutor
import fr.irit.smac.may.lib.components.scheduling.interfaces.SchedulingControl
import fr.irit.smac.may.lib.interfaces.Do
import java.util.concurrent.Executor

namespace fr.irit.smac.may.lib.components.scheduling {
	
	/**
	 * A scheduler providing two means of executing species
	 * Either synchronised using the tick port
	 * or asynchronised using the async port.
	 * 
	 * Do not use both of them!
	 */
	ecosystem Scheduler {
		
		species Scheduled {
			requires cycle: Do
			provides stop: Do
		}
		
		/**
		 * when called, all agents are called concurrently
		 * (using executor) on their cycle port.
		 * returns upon completion of all agents.
		 */
		provides tick: Do
		
		/**
		 * this one is used to directly run the agents asynchronously
		 * (using executor) on their cycle port.
		 * this should be controlled by SchedulingControllerGUI
		 * for example.
		 */
		provides async: SchedulingControl
		
		requires executor: AdvancedExecutor
	}
	
	/**
	 * A clock that give time to the execution
	 * of a system.
	 * Should be controlled by SchedulingControllerGUI
	 * for example
	 */
	component Clock {
		requires sched: Executor
		requires tick: Do
		
		provides control: SchedulingControl
	}
	
	component SchedulingControllerGUI {
		requires control: SchedulingControl
	}

	/**
	 * A wrapper for an executor service
	 * Also provides a species for executing tasks
	 * 
	 */
	ecosystem ExecutorServiceWrapper {
		
		provides executor: AdvancedExecutor
		
		/**
		 * Will stop all of the tasks
		 */
		provides stop: Do
		
		species Executing {
			
			provides executor: AdvancedExecutor
			
			/**
			 * Will stop only the tasks of this agent
			 */
			provides stop: Do
		}
	}
}
