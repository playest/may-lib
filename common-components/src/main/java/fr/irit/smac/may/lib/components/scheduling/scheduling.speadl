import fr.irit.smac.may.lib.components.scheduling.interfaces.AdvancedExecutor
import fr.irit.smac.may.lib.components.scheduling.interfaces.SchedulingControl
import fr.irit.smac.may.lib.interfaces.Do
import java.util.concurrent.Executor

namespace fr.irit.smac.may.lib.components.scheduling {
	
	ecosystem Scheduled {
		species Agent {
			requires cycle: Do
			provides stop: Do
		}
		
		/**
		 * when called, all agents are called concurrently
		 * (using sched) on their cycle port.
		 * returns upon completion of all agents
		 */
		provides tick: Do
		requires sched: AdvancedExecutor
		
		provides async: SchedulingControl
	}
	
	/**
	 * One step means to execute all agents once
	 */
	component Clock {
		requires sched: Executor
		requires tick: Do
		
		provides control: SchedulingControl
	}
	
	component SchedulingControllerGUI {
		requires control: SchedulingControl
	}


	/**
	 * Will schedule as much tasks as needed.
	 * Stop will stop any task not finished.
	 */
	ecosystem Scheduler {
		species Agent {
			provides exec: AdvancedExecutor
			provides stop: Do
		}
		
		requires executor: AdvancedExecutor
	}

	component ExecutorService {
		provides exec: AdvancedExecutor
		provides stop: Do
	}
}