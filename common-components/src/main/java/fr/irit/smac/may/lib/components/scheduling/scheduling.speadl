
import fr.irit.smac.may.lib.interfaces.*
import fr.irit.smac.may.lib.components.scheduling.interfaces.*
import java.util.concurrent.Executor

namespace fr.irit.smac.may.lib.components.scheduling {
	
	
	transverse Scheduled {
		agent {
			requires cycle: Do
			provides stop: Do
		}
		infra {
			/**
			 * when called, all agents are called concurrently
			 * (using sched) on their cycle port
			 * return upon completion of all agents 
			 */
			provides tick: Do
			requires sched: Executor
		}
	}
	
	/**
	 * One step means to execute all agents once
	 */
	component Clock {
		requires sched: Executor
		requires tick: Do
		
		provides control: SchedulingControl
	}
	
	component SchedulingControllerGUI {
		requires control: SchedulingControl
	}


	/**
	 * Will schedule as much tasks as needed
	 * Stop will stop any task not finished
	 */
	transverse Scheduler {
		agent {
			provides sched: Executor
			provides stop: Do
		}
		infra {
			requires infraSched: Executor
		}
	}
	
	namespace ase {
		/**
		 * One step equals to execute at once the number of max thread to be created
		 * It is not meant to schedule a set of agents all at once (for that see Clock),
		 * but to execute a set of tasks bit by bit
		 * 
		 * Prefer to use the Clock with an ExecutorService
		 */
		component AlternateStateExecutorService {
			provides exec: Executor
			provides control: SchedulingControl
		}
	}

	component ExecutorService {
		provides exec: Executor
	}
}