
import fr.irit.smac.may.lib.interfaces.*
import fr.irit.smac.may.lib.components.messaging.receiver.AgentRef
import java.lang.String

namespace fr.irit.smac.may.lib.components.messaging {

	/**
	 * Deprecated
	 * Should be replaced by meta.Forward[Send[MsgType, Ref]]
	 */
	transverse Sender[MsgType, Ref] {
		agent {
			provides send: Send[MsgType, Ref]
		}
		infra {
			requires deposit: Send[MsgType, Ref]
		}
	}
	
	transverse Broadcaster[T, Ref] {
		agent {
			provides bc: Broadcast[T]
		}
		infra {
			requires deposit: Send[T, Ref]
			provides broadcast: Push[T]
			provides add: Push[Ref]
			provides remove: Push[Ref]
		}
	}

	namespace receiver {
		transverse Receiver[MsgType] {
			agent {
				requires put: Push[MsgType]
				provides me: Pull[AgentRef]
				provides stop: Do
			}
			infra {
				provides deposit: Send[MsgType, AgentRef]
			}
		}
	}
	
	// to combine for example with meta.Data and an infrastructure component generating the references...
	transverse MapReceiver[Msg,RealRef,Ref] {
		agent {
			requires realMe: Pull[RealRef]
			requires me: Pull[Ref]
			provides disconnect: Do
		}
		infra {
			provides deposit: Send[Msg,Ref]
			
			requires realDeposit: Send[Msg,RealRef]
		}
	}
	
	namespace distributed {
		
		import fr.irit.smac.may.lib.components.messaging.distributed.*
		
		// a bit useless now it seemsâ€¦
		component DistributedMessaging[Msg,NodeRef] {
			provides generateRef: Pull[DistRef[NodeRef]]
			
			provides send: Send[Msg,DistRef[NodeRef]]
			requires deposit: Send[Msg,DistRef[NodeRef]]
			
			requires myNode: Pull[NodeRef]

			requires distOut: Push[DistributedMessage[Msg,NodeRef]]
			provides distIn: Push[DistributedMessage[Msg,NodeRef]]
		}
		
		component DistributedCommunication[T] {
			
			provides nodeName: Pull[String]
			
			provides in: Send[T,String]
			requires out: Push[T]
			
			requires broadcast: Push[DistributedInfo[T]]
			provides handle: Push[DistributedInfo[T]]
		}
	}
	
}